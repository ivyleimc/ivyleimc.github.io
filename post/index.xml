<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IvyLei - blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on IvyLei - blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Feb 2021 20:50:44 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 事件循环</title>
      <link>http://localhost:1313/post/js_event_loop/</link>
      <pubDate>Sat, 20 Feb 2021 20:50:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_event_loop/</guid>
      <description>事件循环 1（only 宏任务） JS 是单线程运行的 异步要基于回调来实现 event loop 就是异步回调的实现原理 把所有代码放到 Call Stack 里一一执行 有 callback 则放到 Web APIs 等待时机</description>
    </item>
    
    <item>
      <title>JS 异步进阶</title>
      <link>http://localhost:1313/post/js_async_advance/</link>
      <pubDate>Wed, 13 Jan 2021 21:20:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_async_advance/</guid>
      <description>Promise Promise 的三个状态 pending fulfilled rejected 猜猜下面的状态 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53</description>
    </item>
    
    <item>
      <title>JS 异步基础</title>
      <link>http://localhost:1313/post/js_async_base/</link>
      <pubDate>Sat, 09 Jan 2021 18:29:25 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_async_base/</guid>
      <description>基础 单线程，同步，异步 JavaScript 是单线程语言 遇到等待（网络请求，定时任务）会卡住 为了不卡住，引入了异步 同步会阻塞代码执行 异步不会阻塞代码执行 异步的主</description>
    </item>
    
    <item>
      <title>JS 作用域</title>
      <link>http://localhost:1313/post/js_scope/</link>
      <pubDate>Sun, 03 Jan 2021 17:10:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_scope/</guid>
      <description>作用域 和 自由变量 作用域 全局作用域 函数作用域 块级作用域 自由变量 一个变量在当前作用域没有定义，但被使用了 向上级作用域一层层依次寻找，直到找到为止</description>
    </item>
    
    <item>
      <title>React_question</title>
      <link>http://localhost:1313/post/react_question/</link>
      <pubDate>Sun, 20 Dec 2020 13:14:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/react_question/</guid>
      <description>为什么要写 super(props) super()，执行父类构造函数，初始化 this super(props), 传 props 进去是为了初始化 this.props 1 2 //初始化 this.props, React 内相当于 this.props = props; 不传 props 的话，React 也会在实</description>
    </item>
    
    <item>
      <title>React_hook</title>
      <link>http://localhost:1313/post/react_hook/</link>
      <pubDate>Thu, 10 Dec 2020 21:41:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/react_hook/</guid>
      <description>为什么有 Hook？ 回顾 Class 组件，函数组件 Class 组件 有生命周期，有实例，有 state，setState，一旦大了就复杂难拆分 相同业务逻辑，分散到各个</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://localhost:1313/post/markdown/</link>
      <pubDate>Thu, 10 Dec 2020 20:53:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/markdown/</guid>
      <description>换行 在一行的结尾处加两个或者多个空格，然后按回车键，即可创建一个换行(&amp;lt;br/&amp;gt;) 空格 输入 &amp;amp; n b s p ; 空行 输入 &amp;amp; e m s p ;</description>
    </item>
    
    <item>
      <title>Mac</title>
      <link>http://localhost:1313/post/mac/</link>
      <pubDate>Thu, 10 Dec 2020 20:47:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mac/</guid>
      <description>VS Code 折叠代码： command+k+0 展开代码： command+k+j 批量注释： ⬆️+option+a 格式化： ⬆️+option+f</description>
    </item>
    
    <item>
      <title>Fontend Encoding</title>
      <link>http://localhost:1313/post/fontend-encoding/</link>
      <pubDate>Wed, 11 Nov 2020 22:00:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fontend-encoding/</guid>
      <description>window.btoa() window.atob()
  encodeURI() decodeURI()
  encodeURIComponent() decodeURIComponent()
  </description>
    </item>
    
    <item>
      <title>ES6</title>
      <link>http://localhost:1313/post/es6/</link>
      <pubDate>Tue, 01 Sep 2020 20:55:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/es6/</guid>
      <description>对象字面量的扩展 🌰，栗子 1 2 3 4 5 6 7 8 9 10 11 12 const x = 1, y = 2; //对象字面量 const obj = { x: x, y: y, fn: function afn() { console.log(afn.hasOwnProperty(&amp;#39;prototype&amp;#39;)); } } console.log(obj.x); console.log(obj.y); console.log(obj.fn()); 简洁属性 1 2 3 4 5 6 7 8 const x</description>
    </item>
    
    <item>
      <title>AngularJs</title>
      <link>http://localhost:1313/post/angularjs/</link>
      <pubDate>Thu, 27 Aug 2020 21:08:54 +0800</pubDate>
      
      <guid>http://localhost:1313/post/angularjs/</guid>
      <description>UI 模块 作用域 控制器 视图 指令 过滤器 路由 服务 Promise 消息 单元测试 端到端测试</description>
    </item>
    
    <item>
      <title>JS 基础</title>
      <link>http://localhost:1313/post/js_base/</link>
      <pubDate>Sun, 23 Aug 2020 17:23:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_base/</guid>
      <description>变量类型 值类型和引用类型的区别 值类型 1 2 3 4 5 let a = 100; let b = a; a = 200; console.log(b); //100 栈 栈 栈 key value key value key value a 100 a 100 a 200 b 100 b 100 常见值类型 let a; //undefined const s = &amp;lsquo;abc&amp;rsquo;; //string const n</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>http://localhost:1313/post/css/</link>
      <pubDate>Wed, 19 Aug 2020 21:10:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/css/</guid>
      <description>布局 盒子模型 一般情况 （没设 box-sizing 或者 box-sizing:content-box） 元素宽度（offsetWidth） = width + padding * 2 + border * 2（没有 m</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>http://localhost:1313/post/html/</link>
      <pubDate>Wed, 19 Aug 2020 20:51:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/html/</guid>
      <description>对 HTML 语义化的理解 好处 让人更容易阅读 （有利于开发和维护） 让机器更容易阅读 （搜索引擎优化SEO，爬虫，还有阅读器） 块级元素 &amp;amp; 内连元素 display: block/table div, p, h1~h6,</description>
    </item>
    
    <item>
      <title>Node</title>
      <link>http://localhost:1313/post/js_node/</link>
      <pubDate>Tue, 11 Aug 2020 21:25:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_node/</guid>
      <description>1. exports VS module.exports 模块成员导出的三种方法: exports.xxx = xxx; module.exports.xxx = xxx; module.exports = {&amp;hellip;} // exports 不能这样哦 exports 和 module.exports 指向同一内存空间 exports = module.exports = {&amp;hellip;} 但是 🍳 最终会以 module.exports 为准 若某天有人写了句 module.exports = {&amp;hellip;}; 这</description>
    </item>
    
    <item>
      <title>[Issue] this 箭头函数</title>
      <link>http://localhost:1313/post/issue_this_arrowfunctionexpression/</link>
      <pubDate>Wed, 10 Jun 2020 21:48:58 +0800</pubDate>
      
      <guid>http://localhost:1313/post/issue_this_arrowfunctionexpression/</guid>
      <description>出现问题 1 2 &amp;lt;div class=&amp;#34;cl&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;cl&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 1 2 3 $(&amp;#39;.cl&amp;#39;).bind(&amp;#39;click&amp;#39;, () =&amp;gt; { console.log($(this)); // ??? 打印出来的不是我点击的对象 }); 愣在那里一会才想起来好像箭头函数会影响 this 的指向 现在想起都觉得自己当时傻 -.-!</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>http://localhost:1313/post/hugo/</link>
      <pubDate>Wed, 06 May 2020 21:47:12 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hugo/</guid>
      <description>1. 启动本地服务 1 2 cd code/blog hugo server 2. 打包（Markdown &amp;gt; HTML） 1 2 cd code/blog hugo -t even 3. 提交修改到 GitHub 3.1 首次 1 2 3 4 5 6 7 8 cd code/blog/public git init git add -A git commit -m &amp;#34;message&amp;#34; git remote add</description>
    </item>
    
    <item>
      <title>JS 原型</title>
      <link>http://localhost:1313/post/js_prototype/</link>
      <pubDate>Tue, 21 Apr 2020 06:36:46 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js_prototype/</guid>
      <description>原型链 首先清楚五点个点 所有对象都有 __proto__ 内置属性 所有函数都有 prototype 内置属性 通过 new 函数调用法调用函数创建新对象（或者叫 实例），新对象（实例）的 __proto__ 会指向</description>
    </item>
    
  </channel>
</rss>